#include <iostream>
#include <vector>
#include <iomanip>

using namespace std;

void printMatrix(vector<vector<double>> &matrix) {
    int n = matrix.size();
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n+1; j++) {
            cout << setw(10) << matrix[i][j] << " ";
        }
        cout << endl;
    }
}

vector<double> gaussElimination(vector<vector<double>> matrix) {
    int n = matrix.size();
    for (int i = 0; i < n; i++) {
        // Partial pivoting
        for (int k = i + 1; k < n; k++) {
            if (abs(matrix[i][i]) < abs(matrix[k][i])) {
                for (int j = 0; j <= n; j++) {
                    swap(matrix[i][j], matrix[k][j]);
                }
            }
        }
        // Forward Elimination
        for (int k = i + 1; k < n; k++) {
            double t = matrix[k][i] / matrix[i][i];
            for (int j = 0; j <= n; j++) {
                matrix[k][j] -= t * matrix[i][j];
            }
        }
    }

    vector<double> x(n);
    // Back Substitution
    for (int i = n - 1; i >= 0; i--) {
        x[i] = matrix[i][n];
        for (int j = i + 1; j < n; j++) {
            x[i] -= matrix[i][j] * x[j];
        }
        x[i] = x[i] / matrix[i][i];
    }
    return x;
}

int main() {
    vector<vector<double>> matrix = {
        {9, 1, 7, -1, 1, 55},
        {2, 1, 7, 3, -6, -66},
        {4, 1, 7, 3, -7, -43},
        {-9, 1, -5, 2, -3, -24}
    };

    vector<double> result = gaussElimination(matrix);

    cout << "Решения системы методом Гаусса:" << endl;
    for (int i = 0; i < result.size(); i++) {
        cout << "x" << i + 1 << " = " << result[i] << endl;
    }

    return 0;
}
